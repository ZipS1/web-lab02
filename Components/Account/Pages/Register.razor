@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using lab02.Database
@using lab02.Models
@using lab02.Models.Account

@inject UserManager<AppUser> UserManager
@inject IUserStore<AppUser> UserStore
@inject SignInManager<AppUser> SignInManager
@inject IEmailSender<AppUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject AppDbContext DbContext

<PageTitle>Регистрация</PageTitle>

<h1>Регистрация</h1>

<div class="row">
    <div class="col-md-4">
        <StatusMessage Message="@Message" />
        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
            <DataAnnotationsValidator />
            <hr />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                <label for="email">Электронная почта</label>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="password">Пароль</label>
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="confirm-password">Подтвердите пароль</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="lastname" class="form-label">Фамилия:</label>
                <InputText id="lastname" @bind-Value="Input.LastName" class="form-control" />
                <ValidationMessage For="() => Input.LastName" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="firstname" class="form-label">Имя:</label>
                <InputText id="firstname" @bind-Value="Input.FirstName" class="form-control" />
                <ValidationMessage For="() => Input.FirstName" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="middlename" class="form-label">Отчество:</label>
                <InputText id="middlename" @bind-Value="Input.MiddleName" class="form-control" />
                <ValidationMessage For="() => Input.MiddleName" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="position" class="form-label">Должность:</label>
                <InputText id="position" @bind-Value="Input.Position" class="form-control" />
                <ValidationMessage For="() => Input.Position" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="supplierid" class="form-label">Поставщик:</label>
                <InputSelect id="supplierid" @bind-Value="Input.SupplierId" class="form-control">
                    <option value="">Выберите поставщика (или попросите администратора добавить)</option>
                    @foreach (var supplier in suppliers!)
                    {
                        <option value="@supplier.SupplierId">@supplier.FullName</option>
                    }
                </InputSelect>
                <ValidationMessage For="() => Input.SupplierId" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Зарегистрироваться</button>
        </EditForm>
    </div>
</div>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private List<Supplier>? suppliers;

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    protected override void OnInitialized()
    {
        suppliers = DbContext.Suppliers.OrderBy(s => s.FullName).ToList();
    }

    public async Task RegisterUser(EditContext editContext)
    {
        var user = new AppUser()
            {
                LastName = Input.LastName,
                FirstName = Input.FirstName,
                MiddleName = Input.MiddleName,
                Position = Input.Position,
                SupplierId = Input.SupplierId
            };

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        var supplierAgentRoleId = DbContext.Roles.FirstOrDefault(r => r.Name == "SupplierAgent")!.Id;

        DbContext.Add(new IdentityUserRole<string>()
        {
            UserId = user.Id,
            RoleId = supplierAgentRoleId
        });

        await DbContext.SaveChangesAsync();

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private AppUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<AppUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(AppUser)}'. " +
                $"Ensure that '{nameof(AppUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<AppUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<AppUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "Пароли не совпадают.")]
        public string ConfirmPassword { get; set; } = "";

        [Required]
        [Display(Name = "Фамилия")]
        [StringLength(100, ErrorMessage = "{0} должно быть не меньше {2} и не больше {1} символов.", MinimumLength = 3)]
        public string? LastName { get; set; }

        [Required]
        [Display(Name = "Имя")]
        [StringLength(100, ErrorMessage = "{0} должно быть не меньше {2} и не больше {1} символов.", MinimumLength = 3)]
        public string? FirstName { get; set; }

        [Required]
        [Display(Name = "Отчество")]
        [StringLength(100, ErrorMessage = "{0} должно быть не меньше {2} и не больше {1} символов.", MinimumLength = 3)]
        public string? MiddleName { get; set; }

        [Required]
        [Display(Name = "Должность")]
        [StringLength(100, ErrorMessage = "{0} должно быть не меньше {2} и не больше {1} символов.", MinimumLength = 3)]
        public string? Position { get; set; }

        [Required]
        [Display(Name = "Поставщик")]
        public int? SupplierId { get; set; }
    }
}
