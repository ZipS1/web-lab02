@page "/import"
@attribute [Authorize(Roles = "Admin")]

@using ClosedXML.Excel
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using lab02.Database
@using lab02.Models
@inject IDbContextFactory<AppDbContext> DbFactory;

<h3>Импорт из Excel</h3>

<p>
    <label>
        Укажите файл Excel для импорта:
        <br/>
        <InputFile class="btn btn-success mb-2" OnChange="HandleImport" />
    </label>
</p>

@if (isLoading)
{
    <p><em>Загрузка...</em></p>
} else if (!string.IsNullOrEmpty(parsingErrorMessage))
{
    <h5>Ошибка обработки Excel: @parsingErrorMessage</h5>
} else if (!string.IsNullOrEmpty(errorMessage))
{
    <h5>Ошибка: @errorMessage</h5>
} else if (isImportedSuccessfully)
{
    <h5>Импорт выполнен успешно</h5>
    <ul>
        <li>Количество импортированных цветов: @flowers.Count()</li>
        <li>Количество импортированных поставщиков: @suppliers.Count()</li>
        <li>Количество импортированных поставок: @supplies.Count()</li>
    </ul>
}

@code {
    private const int MAX_FILESIZE = 5 * 1024 * 1024; // 5 MB

    private List<Flower> flowers = new();
    private List<Supplier> suppliers = new();
    private List<Supply> supplies = new();

    private bool isLoading = false;
    private bool isImportedSuccessfully = false;
    private string errorMessage = string.Empty;
    private string parsingErrorMessage = string.Empty;

    private async Task HandleImport(InputFileChangeEventArgs e)
    {
        isLoading = true;
        isImportedSuccessfully = false;

        IBrowserFile? browserFile = e.File;
        if (browserFile == null)
        {
            errorMessage = "Файл не выбран";
            return;
        }

        if (browserFile.Size > MAX_FILESIZE)
        {
            errorMessage = "Превышен максимальный размер файла (5 МБ)";
            return;
        }

        using var fileStream = browserFile.OpenReadStream(MAX_FILESIZE);
        using var memoryStream = new MemoryStream();
        await fileStream.CopyToAsync(memoryStream);

        try
        {
            using XLWorkbook workbook = new XLWorkbook(memoryStream);
            await CommitFromWorkbook(workbook);
        } catch (Exception err)
        {
            errorMessage = err.Message;
        } finally
        {
            isLoading = false;
        }
        isImportedSuccessfully = true;
    }

    private async Task CommitFromWorkbook(XLWorkbook workbook)
    {
        using var context = await DbFactory.CreateDbContextAsync();
        using (var transaction = context.Database.BeginTransaction())
        {
            IXLWorksheet? flowersWorksheet = workbook.Worksheets.FirstOrDefault(w => w.Name == "Цветы");
            if (flowersWorksheet is not null)
            {
                HandleFlowersWorksheet(flowersWorksheet);
                await context.AddRangeAsync(flowers);
                await context.SaveChangesAsync();
            }

            IXLWorksheet? suppliersWorksheet = workbook.Worksheets.FirstOrDefault(w => w.Name == "Поставщики");
            if (suppliersWorksheet is not null)
            {
                HandleSuppliersWorksheet(suppliersWorksheet);
                await context.AddRangeAsync(suppliers);
                await context.SaveChangesAsync();
            }

            IXLWorksheet? suppliesWorksheet = workbook.Worksheets.FirstOrDefault(w => w.Name == "Поставки");
            if (suppliesWorksheet is not null)
            {
                HandleSuppliesWorksheet(suppliesWorksheet);
                await context.AddRangeAsync(supplies);
                await context.SaveChangesAsync();
            }

            await transaction.CommitAsync();
        }
    }

    private void HandleFlowersWorksheet(IXLWorksheet flowersWorksheet)
    {
        int i = 0;
        try 
        {
            for (i = 2; !flowersWorksheet.Row(i).IsEmpty(); i++)
            {
                Flower flower = new();
                flower.Name = flowersWorksheet.Cell(i, 1).Value.ToString();
                flower.Kind = flowersWorksheet.Cell(i, 2).Value.ToString();
                flower.AverageHeight = Convert.ToSingle(flowersWorksheet.Cell(i, 3).Value.GetNumber());
                flower.LeafType = flowersWorksheet.Cell(i, 4).Value.ToString();
                flower.CanBloom = flowersWorksheet.Cell(i, 5).Value.ToString() == "Да";
                flower.Details = flowersWorksheet.Cell(i, 6).Value.ToString();
                flowers.Add(flower);
            }
        } catch (Exception)
        {
            parsingErrorMessage = $"Лист \"Цветы\", строка {i}";
            throw;
        }
    }

    private void HandleSuppliersWorksheet(IXLWorksheet suppliersWorksheet)
    {
        int i = 0;
        try 
        {
            for (i = 2; !suppliersWorksheet.Row(i).IsEmpty(); i++)
            {
                Supplier supplier = new();
                supplier.FullName = suppliersWorksheet.Cell(i, 1).Value.ToString();
                supplier.ShortName = suppliersWorksheet.Cell(i, 2).Value.ToString();
                supplier.LegalAddress = suppliersWorksheet.Cell(i, 3).Value.ToString();
                supplier.PhoneNumber = suppliersWorksheet.Cell(i, 4).Value.ToString();
                supplier.DirectorName = suppliersWorksheet.Cell(i, 5).Value.ToString();
                suppliers.Add(supplier);
            }
        } catch (Exception)
        {
            parsingErrorMessage = $"Лист \"Поставщики\", строка {i}";
            throw;
        }
    }

    private void HandleSuppliesWorksheet(IXLWorksheet suppliesWorksheet)
    {
        int i = 0;
        try
        {
            for (i = 2; !suppliesWorksheet.Row(i).IsEmpty(); i++)
            {
                Supply supply = new();

                string flowerNameFromTable = suppliesWorksheet.Cell(i, 1).Value.ToString();
                supply.FlowerId = flowers.FirstOrDefault(f => f.Name == flowerNameFromTable)!.FlowerId;

                supply.DeliveryDate = DateTime.ParseExact(suppliesWorksheet.Cell(i, 2).Value.ToString(), "d", null);
                supply.PricePerUnit = Convert.ToSingle(suppliesWorksheet.Cell(i, 3).Value.GetNumber());
                supply.Units = Convert.ToInt32(suppliesWorksheet.Cell(i, 4).Value.GetNumber());

                string supplierNameFromTable = suppliesWorksheet.Cell(i, 5).Value.ToString();
                supply.SupplierId = suppliers.FirstOrDefault(s => s.FullName == supplierNameFromTable)!.SupplierId;
                supplies.Add(supply);
            }
        } catch (Exception)
        {
            parsingErrorMessage = $"Лист \"Поставки\", строка {i}";
            throw;
        }
    }
}
