@page "/flowers/details"
@using Microsoft.EntityFrameworkCore
@using lab02.Models
@inject IDbContextFactory<lab02.Database.AppDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>Flower</h2>
    <hr />
    @if (flower is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@flower.Name</dd>
            <dt class="col-sm-2">Kind</dt>
            <dd class="col-sm-10">@flower.Kind</dd>
            <dt class="col-sm-2">AverageHeight</dt>
            <dd class="col-sm-10">@flower.AverageHeight</dd>
            <dt class="col-sm-2">LeafType</dt>
            <dd class="col-sm-10">@flower.LeafType</dd>
            <dt class="col-sm-2">CanBloom</dt>
            <dd class="col-sm-10">@flower.CanBloom</dd>
            <dt class="col-sm-2">Details</dt>
            <dd class="col-sm-10">@flower.Details</dd>
        </dl>
        <div>
            <a href="@($"/flowers/edit?flowerid={flower.FlowerId}")">Edit</a> |
            <a href="@($"/flowers")">Back to List</a>
        </div>
    }
</div>

@code {
    private Flower? flower;

    [SupplyParameterFromQuery]
    private int FlowerId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        flower = await context.Flowers.FirstOrDefaultAsync(m => m.FlowerId == FlowerId);

        if (flower is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
