@page "/flowers/details"
@attribute [Authorize(Roles = "Admin")]

@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using lab02.Models
@inject IDbContextFactory<lab02.Database.AppDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Подробности цветка</PageTitle>

<h1>Подробности цветка</h1>

<div>
    <hr />
    @if (flower is null)
    {
        <p><em>Загрузка...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Имя</dt>
            <dd class="col-sm-10">@flower.Name</dd>
            <dt class="col-sm-2">Сорт</dt>
            <dd class="col-sm-10">@flower.Kind</dd>
            <dt class="col-sm-2">Ср. высота</dt>
            <dd class="col-sm-10">@flower.AverageHeight</dd>
            <dt class="col-sm-2">Тип цветка</dt>
            <dd class="col-sm-10">@flower.LeafType</dd>
            <dt class="col-sm-2">Цветет?</dt>
            <dd class="col-sm-10">@(flower.CanBloom ? "Да" : "Нет")</dd>
            <dt class="col-sm-2">Доп. сведения</dt>
            <dd class="col-sm-10">@flower.Details</dd>
        </dl>
        <div>
            <a href="@($"/flowers/edit?flowerid={flower.FlowerId}")">Редактировать</a> |
            <a href="@($"/flowers")">Назад к списку</a>
        </div>
    }
</div>

@code {
    private Flower? flower;

    [SupplyParameterFromQuery]
    private int FlowerId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        flower = await context.Flowers.FirstOrDefaultAsync(m => m.FlowerId == FlowerId);

        if (flower is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
