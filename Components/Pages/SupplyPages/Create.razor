@page "/supplies/create"
@attribute [Authorize]

@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using lab02.Models
@inject IDbContextFactory<lab02.Database.AppDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Создание поставки</PageTitle>

<h1>Создание поставки @SupplierNamePlaceholder @FlowerNamePlaceholder</h1>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Supply" OnValidSubmit="AddSupply" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />
            <div class="mb-3">
                <label for="flowerid" class="form-label">Цветок:</label>
                @if (FlowerId is null)
                {
                    <InputSelect id="flowerid" @bind-Value="Supply.FlowerId" class="form-select">
                        <option value="">Выберите цветок</option>
                        @foreach (var flower in flowers!)
                        {
                            <option value="@flower.FlowerId">@flower.Name</option>
                        }
                    </InputSelect>
                }
                else
                {
                    <InputSelect id="supplierid" @bind-Value="Supply.SupplierId" class="form-select" disabled>
                        <option value="@FlowerId">@flowers!.FirstOrDefault(s => s.FlowerId == FlowerId)!.Name</option>
                    </InputSelect>
                }
                <ValidationMessage For="() => Supply.FlowerId" class="text-danger" />
            </div>     
            <div class="mb-3">
                <label for="deliverydate" class="form-label">Дата поставки:</label> 
                <InputDate id="deliverydate" @bind-Value="Supply.DeliveryDate" class="form-control" /> 
                <ValidationMessage For="() => Supply.DeliveryDate" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="priceperunit" class="form-label">Цена за единицу:</label> 
                <InputNumber id="priceperunit" @bind-Value="Supply.PricePerUnit" class="form-control" /> 
                <ValidationMessage For="() => Supply.PricePerUnit" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="units" class="form-label">Количество:</label> 
                <InputNumber id="units" @bind-Value="Supply.Units" class="form-control" /> 
                <ValidationMessage For="() => Supply.Units" class="text-danger" /> 
            </div>
            <div class="mb-3">
                <label for="supplierid" class="form-label">Поставщик:</label>
                @if (SupplierId is null)
                {
                    <InputSelect id="supplierid" @bind-Value="Supply.SupplierId" class="form-select">
                    <option value="">Выберите поставщика</option>
                     @foreach (var supplier in suppliers!)
                     {
                         <option value="@supplier.SupplierId">@supplier.FullName</option>
                     }
                    </InputSelect>
                } else
                {
                    <InputSelect id="supplierid" @bind-Value="Supply.SupplierId" class="form-select" disabled>
                        <option value="@SupplierId">@suppliers!.FirstOrDefault(s => s.SupplierId == SupplierId)!.FullName</option>
                    </InputSelect>
                }
                <ValidationMessage For="() => Supply.SupplierId" class="text-danger" />
            </div>
            <button type="submit" class="btn btn-primary">Сохранить</button>
        </EditForm>
    </div>
</div>


@if  (SupplierId is null && FlowerId is null)
{
    <div>
        <a href="@($"/supplies")">Назад к списку поставок</a>
    </div>
}
else if (SupplierId is not null)
{
    <div>
        <a href="@($"/supplies?supplierid={SupplierId}")">Назад к списку поставок @SupplierNamePlaceholder</a>
    </div>
} else if (FlowerId is not null)
{
    <div>
        <a href="@($"/supplies?flowerid={FlowerId}")">Назад к списку поставок @FlowerNamePlaceholder</a>
    </div>
}

@if (SupplierId is not null || FlowerId is not null)
{
    <div>
        <a href="@($"/supplies")">Назад к полному списку поставок</a>
    </div>
}

@code {
    [SupplyParameterFromForm]
    private Supply Supply { get; set; } = new();

    [SupplyParameterFromQuery]
    private int? SupplierId { get; set; }

    [SupplyParameterFromQuery]
    private int? FlowerId { get; set; }

    private string SupplierNamePlaceholder = string.Empty;
    private string FlowerNamePlaceholder = string.Empty;

    private List<Flower>? flowers;
    private List<Supplier>? suppliers;

    protected override Task OnInitializedAsync()
    {
        Supply.DeliveryDate = DateTime.Now;
        Supply.SupplierId = SupplierId ?? Supply.SupplierId;

        using var context = DbFactory.CreateDbContext();
        flowers = context.Flowers.ToList();
        suppliers = context.Suppliers.ToList();

        SupplierNamePlaceholder = SupplierId is null ? "" : context.Suppliers.FirstOrDefault(s => s.SupplierId == SupplierId)!.FullName!;
        FlowerNamePlaceholder = FlowerId is null ? "" : $"({context.Flowers.FirstOrDefault(s => s.FlowerId == FlowerId)!.Name!})";

        return Task.CompletedTask;
    }
    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddSupply()
    {
        using var context = DbFactory.CreateDbContext();
        context.Supplies.Add(Supply);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/supplies");
    }
}
