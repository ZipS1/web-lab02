@page "/supplies/edit"
@using Microsoft.EntityFrameworkCore
@using lab02.Models
@inject IDbContextFactory<lab02.Database.AppDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Supply</h2>
<hr />
@if (Supply is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Supply" OnValidSubmit="UpdateSupply" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="Supply.SupplyId" value="@Supply.SupplyId" />
                <div class="mb-3">
                    <label for="flowerid" class="form-label">FlowerId:</label>
                    <InputNumber id="flowerid" @bind-Value="Supply.FlowerId" class="form-control" />
                    <ValidationMessage For="() => Supply.FlowerId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="deliverydate" class="form-label">DeliveryDate:</label>
                    <InputDate id="deliverydate" @bind-Value="Supply.DeliveryDate" class="form-control" />
                    <ValidationMessage For="() => Supply.DeliveryDate" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="priceperunit" class="form-label">PricePerUnit:</label>
                    <InputNumber id="priceperunit" @bind-Value="Supply.PricePerUnit" class="form-control" />
                    <ValidationMessage For="() => Supply.PricePerUnit" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="units" class="form-label">Units:</label>
                    <InputNumber id="units" @bind-Value="Supply.Units" class="form-control" />
                    <ValidationMessage For="() => Supply.Units" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="supplierid" class="form-label">SupplierId:</label>
                    <InputNumber id="supplierid" @bind-Value="Supply.SupplierId" class="form-control" />
                    <ValidationMessage For="() => Supply.SupplierId" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/supplies">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int SupplyId { get; set; }

    [SupplyParameterFromForm]
    private Supply? Supply { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Supply ??= await context.Supplies.FirstOrDefaultAsync(m => m.SupplyId == SupplyId);

        if (Supply is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateSupply()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Supply!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!SupplyExists(Supply!.SupplyId))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/supplies");
    }

    private bool SupplyExists(int supplyid)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Supplies.Any(e => e.SupplyId == supplyid);
    }
}
