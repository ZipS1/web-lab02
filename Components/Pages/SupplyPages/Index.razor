@page "/supplies"
@attribute [Authorize]

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using System.Security.Claims
@using lab02.Models
@using lab02.Database
@using lab02.Models.Account
@implements IAsyncDisposable
@inject IDbContextFactory<lab02.Database.AppDbContext> DbFactory
@inject NavigationManager NavigationManager
@inject UserManager<AppUser> UserManager
@inject AuthenticationStateProvider AuthStateProvider

<PageTitle>Список поставок</PageTitle>

<h1>Список поставок @SupplierNamePlaceholder @FlowerNamePlaceholder</h1>

@if (FlowerId is not null)
{
    <p>
        <a href="@($"flowers")">К списку цветов</a>
    </p>
}

@if (SupplierId is not null)
{
    <p>
        <a href="@($"suppliers")">К списку поставщиков</a>
    </p>
}

@if ((SupplierId is not null || FlowerId is not null) && userClaims!.IsInRole("Admin"))
{
    <p>
        <a href="@($"supplies")">К полному списку поставок</a>
    </p>
}

<p>
    <a href="@($"supplies/create?supplierid={SupplierId}&flowerid={FlowerId}")">Создать</a>
</p>

<QuickGrid Class="table" Items="dbContext.Supplies
                                        .Where(s => SupplierId == null || s.SupplierId == SupplierId)
                                        .Where(s => FlowerId == null || s.FlowerId == FlowerId)">
    <PropertyColumn Title="Цветок" Property="@(supply => $"{dbContext.Flowers.FirstOrDefault(f => f.FlowerId == supply.FlowerId)!.Name}")" />
    <PropertyColumn Title="Дата поставки" Property="supply => supply.DeliveryDate.ToShortDateString()" />
    <PropertyColumn Title="Цена за единицу" Property="supply => supply.PricePerUnit" />
    <PropertyColumn Title="Количество" Property="supply => supply.Units" />
    <PropertyColumn Title="Поставщик" Property="@(supply => $"{dbContext.Suppliers.FirstOrDefault(f => f.SupplierId == supply.SupplierId)!.FullName}")" />

    <TemplateColumn Context="supply">
        <a href="@($"supplies/edit?supplyid={supply.SupplyId}&supplierid={SupplierId}&flowerid={FlowerId}")">Редактировать</a> |
        <a href="@($"supplies/details?supplyid={supply.SupplyId}&supplierid={SupplierId}&flowerid={FlowerId}")">Детали</a> |
        <a href="@($"supplies/delete?supplyid={supply.SupplyId}&supplierid={SupplierId}&flowerid={FlowerId}")">Удалить</a>
    </TemplateColumn>
</QuickGrid>

@code {
    [SupplyParameterFromQuery]
    public int? SupplierId { get; set; }

    [SupplyParameterFromQuery]
    public int? FlowerId { get; set; }

    private string SupplierNamePlaceholder = string.Empty;
    private string FlowerNamePlaceholder = string.Empty;

    private AppDbContext dbContext = default!;
    private ClaimsPrincipal? userClaims;

    protected override async Task OnInitializedAsync()
    {
        dbContext = await DbFactory.CreateDbContextAsync();
        userClaims = (await AuthStateProvider.GetAuthenticationStateAsync()).User;
        await RedirectIfUserIsSupplierAgent();

        SupplierNamePlaceholder = SupplierId is null ? "" : dbContext.Suppliers.FirstOrDefault(s => s.SupplierId == SupplierId)!.FullName!;
        FlowerNamePlaceholder = FlowerId is null ? "" : $"({dbContext.Flowers.FirstOrDefault(s => s.FlowerId == FlowerId)!.Name!})";
    }

    private async Task RedirectIfUserIsSupplierAgent()
    {
        var userId = userClaims!.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
        AppUser? user = await UserManager.FindByIdAsync(userId!);
        if (userClaims.IsInRole("SupplierAgent"))
        {
            await DisposeAsync();
            NavigationManager.NavigateTo($"supplies?supplierid={user!.SupplierId}");
        }
    }

    public async ValueTask DisposeAsync() => await dbContext.DisposeAsync();
}
